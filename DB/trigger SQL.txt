// view user laporan

CREATE VIEW v_user_laporan AS
SELECT laporan_perkara.*, users.nama, users.kode_pa from laporan_perkara JOIN users ON laporan_perkara.id_user = users.id

//end

// triger update tgl_terakhir_rev

DELIMITER $$
CREATE TRIGGER insert_rev_laporan_perkara
    AFTER INSERT 
    ON revisi_laporan
    FOR EACH ROW 
BEGIN
    UPDATE laporan_perkara
    set tgl_terakhir_rev = date('Y-m-d')
    WHERE id = revisi_laporan. laper_id;
END

//end

ALTER TABLE revisi_laporan add FOREIGN KEY(laper_id) REFERENCES laporan_perkara(id);
ALTER TABLE catatan_laporan add FOREIGN KEY(triwulan_id) REFERENCES lap_tri_detail(id);

//create trigger for tgl_terakhir_rev
DELIMITER $$
CREATE TRIGGER tgl_rev
    AFTER INSERT 
    ON revisi_laporan
    FOR EACH ROW 
BEGIN
    update laporan_perkara set tgl_terakhir_rev = CURDATE() where id = new.laper_id;
END$$
DELIMITER ;

// --

//table rekap laporan perkara

CREATE TABLE rekap_laporan_perkara (
    id int not null AUTO_INCREMENT,
    id_user int(11),
    periode_bulan varchar(20),
    periode_tahun varchar(20),
    rekap_pdf varchar(100),
    rekp_xls varchar(100),
    tgl_upload date,
    
    PRIMARY KEY(id),
    FOREIGN KEY(id_user) REFERENCES users(id)
)ENGINE=INNODB;

// end

//Views rekap laporan perkara
CREATE VIEW v_rekap_laporan AS
SELECT rekap_laporan_perkara.*, users.nama, users.kode_pa from rekap_laporan_perkara JOIN users ON rekap_laporan_perkara.id_user = users.id
// end

//create table laporan triwulan
CREATE TABLE laporan_triwulan (
	id int not null AUTO_INCREMENT,
    id_user int(11),
    berkas_laporan Varchar(50),
    periode_triwulan varchar(20),
    periode_tahun varchar(20),
    tgl_upload date,
    tgl_terakhir_revisi date,
    status_laporan varchar(30),
    
    PRIMARY KEY(id),
    FOREIGN KEY(id_user) REFERENCES users(id)
)ENGINE=INNODB;
//end

//create table laporan triwulan detail
create TABLE lap_tri_detail (
	id int not null AUTO_INCREMENT,
    id_lap_tri int(11),
    nm_laporan varchar(25),
    tgl_kirim date,
    lap_pdf varchar(100),
    lap_xls varchar(100),
    rev_pdf varchar(100),
    rev_xls varchar(100),
    tgl_revisi date,
    status_validasi varchar(25),
    
    PRIMARY KEY(id),
    FOREIGN KEY(id_lap_tri) REFERENCES laporan_triwulan(id)

)ENGINE=INNODB;
// end

//Create v_laporan_triwulan

CREATE VIEW v_triwulan_laporan AS
SELECT laporan_triwulan.*, users.nama, users.kode_pa FROM laporan_triwulan JOIN users ON laporan_triwulan.id_user = users.id
//end

//Create v_detail_triwulan
CREATE VIEW v_detail_triwulan AS
SELECT laporan_triwulan.*, lap_tri_detail.id as id_triwulan, lap_tri_detail.nm_laporan, lap_tri_detail.tgl_kirim, lap_tri_detail.lap_pdf, lap_tri_detail.lap_xls, lap_tri_detail.rev_pdf, lap_tri_detail.rev_xls, lap_tri_detail.tgl_revisi, lap_tri_detail.status_validasi, users.nama, users.kode_pa FROM laporan_triwulan JOIN lap_tri_detail on lap_tri_detail.id_lap_tri = laporan_triwulan.id JOIN users ON users.id = laporan_triwulan.id_user
//end

//create table rekap triwulan
CREATE TABLE rekap_triwulan (
	id int not null AUTO_INCREMENT,
    id_user int(11),
    berkas_laporan Varchar(50),
    periode_triwulan varchar(20),
    periode_tahun varchar(20),
    tgl_upload date,
   
    PRIMARY KEY(id),
    FOREIGN KEY(id_user) REFERENCES users(id)
)ENGINE=INNODB;
//end

//create table triwulan detail
create TABLE rekap_tri_detail (
	id int not null AUTO_INCREMENT,
    id_rekap_tri int(11),
    nm_laporan varchar(25),
    tgl_kirim date,
    lap_pdf varchar(100),
    lap_xls varchar(100),
    PRIMARY KEY(id),
    FOREIGN KEY(id_rekap_tri) REFERENCES rekap_triwulan(id)

)ENGINE=INNODB;
//end

//create v_rekap_triwulan
CREATE VIEW v_rekap_triwulan AS
select rekap_triwulan.*, rekap_tri_detail.id as id_triwulan, rekap_tri_detail.nm_laporan, rekap_tri_detail.tgl_kirim, rekap_tri_detail.lap_pdf, rekap_tri_detail.lap_xls, users.kode_pa, users.nama FROM rekap_triwulan JOIN rekap_tri_detail ON rekap_tri_detail.id_rekap_tri = rekap_triwulan.id JOIN users ON users.id = rekap_triwulan.id_user
//end

//create trigger tgl_rev_triwulan
DELIMITER $$
CREATE TRIGGER tgl_rev_triwulan
    AFTER UPDATE 
    ON lap_tri_detail
    FOR EACH ROW 
BEGIN
    update laporan_triwulan set tgl_terakhir_revisi = CURDATE() where id = new.id_lap_tri;
END$$
DELIMITER ;
//end

//create status laporan triwulan revisi
DELIMITER $$
CREATE TRIGGER status_laporan_triwulan
    AFTER UPDATE 
    ON lap_tri_detail
    FOR EACH ROW 
BEGIN
	IF new.status_validasi = 'Revisi' THEN BEGIN
    update laporan_triwulan set status_laporan = 'Revisi' where id = new.id_lap_tri;
    END; END IF;
END$$
DELIMITER ;
//end

//create status laporan triwulan validasi
DELIMITER $$
CREATE TRIGGER status_laporan_triwulan_validasi
    AFTER UPDATE 
    ON lap_tri_detail
    FOR EACH ROW 
BEGIN
	IF new.status_validasi = 'Validasi' AND old.status_validasi = 'Revisi' THEN BEGIN
    update laporan_triwulan set status_laporan = 'Validasi' where id = new.id_lap_tri;
    END; END IF;
END$$
DELIMITER ;
//end